// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type InvType int32

const (
	InvType_block       InvType = 0
	InvType_transaction InvType = 1
)

var InvType_name = map[int32]string{
	0: "block",
	1: "transaction",
}
var InvType_value = map[string]int32{
	"block":       0,
	"transaction": 1,
}

func (x InvType) String() string {
	return proto1.EnumName(InvType_name, int32(x))
}
func (InvType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type Header struct {
	Magic   uint32 `protobuf:"varint,1,opt,name=magic" json:"magic,omitempty"`
	SeqNum  uint32 `protobuf:"varint,2,opt,name=seqNum" json:"seqNum,omitempty"`
	ProtoID uint32 `protobuf:"varint,3,opt,name=protoID" json:"protoID,omitempty"`
	MsgID   uint32 `protobuf:"varint,4,opt,name=msgID" json:"msgID,omitempty"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto1.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Header) GetMagic() uint32 {
	if m != nil {
		return m.Magic
	}
	return 0
}

func (m *Header) GetSeqNum() uint32 {
	if m != nil {
		return m.SeqNum
	}
	return 0
}

func (m *Header) GetProtoID() uint32 {
	if m != nil {
		return m.ProtoID
	}
	return 0
}

func (m *Header) GetMsgID() uint32 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

type Message struct {
	Header  *Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Payload []byte  `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto1.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Message) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Message) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type GetBlocksMsg struct {
	Version       uint32   `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	LocatorHashes []string `protobuf:"bytes,2,rep,name=locatorHashes" json:"locatorHashes,omitempty"`
	HashStop      string   `protobuf:"bytes,3,opt,name=hashStop" json:"hashStop,omitempty"`
}

func (m *GetBlocksMsg) Reset()                    { *m = GetBlocksMsg{} }
func (m *GetBlocksMsg) String() string            { return proto1.CompactTextString(m) }
func (*GetBlocksMsg) ProtoMessage()               {}
func (*GetBlocksMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *GetBlocksMsg) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *GetBlocksMsg) GetLocatorHashes() []string {
	if m != nil {
		return m.LocatorHashes
	}
	return nil
}

func (m *GetBlocksMsg) GetHashStop() string {
	if m != nil {
		return m.HashStop
	}
	return ""
}

type GetInvMsg struct {
	Type  InvType  `protobuf:"varint,1,opt,name=type,enum=proto.InvType" json:"type,omitempty"`
	Hashs []string `protobuf:"bytes,2,rep,name=hashs" json:"hashs,omitempty"`
}

func (m *GetInvMsg) Reset()                    { *m = GetInvMsg{} }
func (m *GetInvMsg) String() string            { return proto1.CompactTextString(m) }
func (*GetInvMsg) ProtoMessage()               {}
func (*GetInvMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GetInvMsg) GetType() InvType {
	if m != nil {
		return m.Type
	}
	return InvType_block
}

func (m *GetInvMsg) GetHashs() []string {
	if m != nil {
		return m.Hashs
	}
	return nil
}

type OnBlockMsg struct {
	Block *BlockData `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
}

func (m *OnBlockMsg) Reset()                    { *m = OnBlockMsg{} }
func (m *OnBlockMsg) String() string            { return proto1.CompactTextString(m) }
func (*OnBlockMsg) ProtoMessage()               {}
func (*OnBlockMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *OnBlockMsg) GetBlock() *BlockData {
	if m != nil {
		return m.Block
	}
	return nil
}

type OnTransactionMsg struct {
	Transaction *TxData `protobuf:"bytes,1,opt,name=transaction" json:"transaction,omitempty"`
}

func (m *OnTransactionMsg) Reset()                    { *m = OnTransactionMsg{} }
func (m *OnTransactionMsg) String() string            { return proto1.CompactTextString(m) }
func (*OnTransactionMsg) ProtoMessage()               {}
func (*OnTransactionMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *OnTransactionMsg) GetTransaction() *TxData {
	if m != nil {
		return m.Transaction
	}
	return nil
}

type GetDataMsg struct {
	InvList []*GetInvMsg `protobuf:"bytes,1,rep,name=InvList" json:"InvList,omitempty"`
}

func (m *GetDataMsg) Reset()                    { *m = GetDataMsg{} }
func (m *GetDataMsg) String() string            { return proto1.CompactTextString(m) }
func (*GetDataMsg) ProtoMessage()               {}
func (*GetDataMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *GetDataMsg) GetInvList() []*GetInvMsg {
	if m != nil {
		return m.InvList
	}
	return nil
}

func init() {
	proto1.RegisterType((*Header)(nil), "proto.Header")
	proto1.RegisterType((*Message)(nil), "proto.Message")
	proto1.RegisterType((*GetBlocksMsg)(nil), "proto.GetBlocksMsg")
	proto1.RegisterType((*GetInvMsg)(nil), "proto.GetInvMsg")
	proto1.RegisterType((*OnBlockMsg)(nil), "proto.OnBlockMsg")
	proto1.RegisterType((*OnTransactionMsg)(nil), "proto.OnTransactionMsg")
	proto1.RegisterType((*GetDataMsg)(nil), "proto.GetDataMsg")
	proto1.RegisterEnum("proto.InvType", InvType_name, InvType_value)
}

func init() { proto1.RegisterFile("message.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x51, 0x5f, 0xaf, 0xd2, 0x30,
	0x14, 0x77, 0x97, 0xcb, 0x70, 0x87, 0xbb, 0xeb, 0x6c, 0x8c, 0x59, 0x78, 0x22, 0x8d, 0x18, 0xc2,
	0x03, 0x26, 0xe8, 0x83, 0xcf, 0x8a, 0x81, 0x19, 0x91, 0xa4, 0xf2, 0x05, 0xca, 0xa8, 0xdb, 0x14,
	0xda, 0xb9, 0xd6, 0x45, 0xbe, 0xbd, 0xe9, 0x69, 0x87, 0xe0, 0x53, 0xf3, 0x3b, 0x7f, 0x7e, 0x7f,
	0x7a, 0x20, 0x3e, 0x09, 0xad, 0x79, 0x21, 0xe6, 0x75, 0xa3, 0x8c, 0x22, 0x7d, 0x7c, 0x46, 0xc3,
	0xfd, 0x51, 0xe5, 0x3f, 0x5d, 0x6d, 0xf4, 0xdc, 0x34, 0x5c, 0x6a, 0x9e, 0x9b, 0x4a, 0x49, 0x57,
	0xa2, 0xdf, 0x21, 0x5c, 0x0b, 0x7e, 0x10, 0x0d, 0x79, 0x01, 0xfd, 0x13, 0x2f, 0xaa, 0x3c, 0x0d,
	0xc6, 0xc1, 0x34, 0x66, 0x0e, 0x90, 0x97, 0x10, 0x6a, 0xf1, 0xeb, 0xeb, 0xef, 0x53, 0x7a, 0x87,
	0x65, 0x8f, 0x48, 0x0a, 0x03, 0x24, 0xc8, 0x96, 0x69, 0x0f, 0x1b, 0x1d, 0x44, 0x1e, 0x5d, 0x64,
	0xcb, 0xf4, 0xde, 0xf3, 0x58, 0x40, 0x3f, 0xc3, 0x60, 0xe3, 0xfc, 0x91, 0x09, 0x84, 0x25, 0x4a,
	0xa2, 0xd2, 0x70, 0x11, 0x3b, 0x2b, 0x73, 0xe7, 0x83, 0xf9, 0x26, 0x2a, 0xf0, 0xf3, 0x51, 0xf1,
	0x03, 0x4a, 0x3f, 0xb0, 0x0e, 0xd2, 0x1f, 0xf0, 0xb0, 0x12, 0xe6, 0x83, 0x0d, 0xa6, 0x37, 0xba,
	0xb0, 0x93, 0xad, 0x68, 0x74, 0xa5, 0xa4, 0xf7, 0xde, 0x41, 0xf2, 0x0a, 0xe2, 0xa3, 0xca, 0xb9,
	0x51, 0xcd, 0x9a, 0xeb, 0x52, 0xe8, 0xf4, 0x6e, 0xdc, 0x9b, 0x46, 0xec, 0xb6, 0x48, 0x46, 0xf0,
	0xb4, 0xe4, 0xba, 0xfc, 0x66, 0x54, 0x8d, 0x61, 0x22, 0x76, 0xc1, 0xf4, 0x13, 0x44, 0x2b, 0x61,
	0x32, 0xd9, 0x5a, 0x21, 0x0a, 0xf7, 0xe6, 0x5c, 0x0b, 0x54, 0x79, 0x5c, 0x3c, 0x7a, 0xdf, 0x99,
	0x6c, 0x77, 0xe7, 0x5a, 0x30, 0xec, 0xd9, 0xf8, 0x76, 0xb9, 0x93, 0x72, 0x80, 0xbe, 0x03, 0xd8,
	0x4a, 0x74, 0x6c, 0x79, 0x5e, 0x43, 0x1f, 0xcf, 0xe2, 0x3f, 0x20, 0xf1, 0x44, 0xd8, 0x5f, 0x72,
	0xc3, 0x99, 0x6b, 0xd3, 0x8f, 0x90, 0x6c, 0xe5, 0xee, 0xdf, 0xcd, 0xec, 0xee, 0x1b, 0x18, 0x5e,
	0x5d, 0xf1, 0xbf, 0x2f, 0xdc, 0xfd, 0xc1, 0xf5, 0xeb, 0x09, 0xfa, 0x1e, 0x60, 0x25, 0x8c, 0xad,
	0xdb, 0xf5, 0x19, 0x0c, 0x32, 0xd9, 0x7e, 0xa9, 0xb4, 0x49, 0x83, 0x71, 0xef, 0x4a, 0xfc, 0x92,
	0x92, 0x75, 0x03, 0xb3, 0x09, 0xce, 0xda, 0x6c, 0x24, 0xf2, 0x8e, 0x93, 0x27, 0xe4, 0xd9, 0x8d,
	0x81, 0x24, 0xd8, 0x87, 0x48, 0xf0, 0xf6, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x60, 0xb0, 0x65,
	0x5a, 0x81, 0x02, 0x00, 0x00,
}
