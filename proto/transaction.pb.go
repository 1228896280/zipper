// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transaction.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TransactionType int32

const (
	TransactionType_Atomic          TransactionType = 0
	TransactionType_AcrossChain     TransactionType = 1
	TransactionType_Merged          TransactionType = 2
	TransactionType_Backfront       TransactionType = 3
	TransactionType_Distribut       TransactionType = 4
	TransactionType_Issue           TransactionType = 5
	TransactionType_IssueUpdate     TransactionType = 6
	TransactionType_JSContractInit  TransactionType = 7
	TransactionType_LuaContractInit TransactionType = 8
	TransactionType_ContractInvoke  TransactionType = 9
	TransactionType_ContractQuery   TransactionType = 10
	TransactionType_Security        TransactionType = 11
)

var TransactionType_name = map[int32]string{
	0:  "Atomic",
	1:  "AcrossChain",
	2:  "Merged",
	3:  "Backfront",
	4:  "Distribut",
	5:  "Issue",
	6:  "IssueUpdate",
	7:  "JSContractInit",
	8:  "LuaContractInit",
	9:  "ContractInvoke",
	10: "ContractQuery",
	11: "Security",
}
var TransactionType_value = map[string]int32{
	"Atomic":          0,
	"AcrossChain":     1,
	"Merged":          2,
	"Backfront":       3,
	"Distribut":       4,
	"Issue":           5,
	"IssueUpdate":     6,
	"JSContractInit":  7,
	"LuaContractInit": 8,
	"ContractInvoke":  9,
	"ContractQuery":   10,
	"Security":        11,
}

func (x TransactionType) String() string {
	return proto1.EnumName(TransactionType_name, int32(x))
}
func (TransactionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type ContractSpec struct {
	Addr   []byte   `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Code   []byte   `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Params []string `protobuf:"bytes,3,rep,name=params" json:"params,omitempty"`
}

func (m *ContractSpec) Reset()                    { *m = ContractSpec{} }
func (m *ContractSpec) String() string            { return proto1.CompactTextString(m) }
func (*ContractSpec) ProtoMessage()               {}
func (*ContractSpec) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *ContractSpec) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *ContractSpec) GetCode() []byte {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *ContractSpec) GetParams() []string {
	if m != nil {
		return m.Params
	}
	return nil
}

type TxHeader struct {
	FromChain  []byte          `protobuf:"bytes,1,opt,name=fromChain,proto3" json:"fromChain,omitempty"`
	ToChain    []byte          `protobuf:"bytes,2,opt,name=toChain,proto3" json:"toChain,omitempty"`
	Type       TransactionType `protobuf:"varint,3,opt,name=type,enum=proto.TransactionType" json:"type,omitempty"`
	Nonce      uint32          `protobuf:"varint,4,opt,name=nonce" json:"nonce,omitempty"`
	Sender     string          `protobuf:"bytes,5,opt,name=sender" json:"sender,omitempty"`
	Recipient  string          `protobuf:"bytes,6,opt,name=recipient" json:"recipient,omitempty"`
	AssetID    uint32          `protobuf:"varint,7,opt,name=assetID" json:"assetID,omitempty"`
	Amount     int64           `protobuf:"varint,8,opt,name=amount" json:"amount,omitempty"`
	Fee        int64           `protobuf:"varint,9,opt,name=fee" json:"fee,omitempty"`
	Signature  []byte          `protobuf:"bytes,10,opt,name=signature,proto3" json:"signature,omitempty"`
	CreateTime uint32          `protobuf:"varint,11,opt,name=createTime" json:"createTime,omitempty"`
}

func (m *TxHeader) Reset()                    { *m = TxHeader{} }
func (m *TxHeader) String() string            { return proto1.CompactTextString(m) }
func (*TxHeader) ProtoMessage()               {}
func (*TxHeader) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *TxHeader) GetFromChain() []byte {
	if m != nil {
		return m.FromChain
	}
	return nil
}

func (m *TxHeader) GetToChain() []byte {
	if m != nil {
		return m.ToChain
	}
	return nil
}

func (m *TxHeader) GetType() TransactionType {
	if m != nil {
		return m.Type
	}
	return TransactionType_Atomic
}

func (m *TxHeader) GetNonce() uint32 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *TxHeader) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *TxHeader) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *TxHeader) GetAssetID() uint32 {
	if m != nil {
		return m.AssetID
	}
	return 0
}

func (m *TxHeader) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TxHeader) GetFee() int64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *TxHeader) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *TxHeader) GetCreateTime() uint32 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

type TxData struct {
	Header       *TxHeader     `protobuf:"bytes,1,opt,name=Header" json:"Header,omitempty"`
	Payload      []byte        `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Meta         []byte        `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
	ContractSpec *ContractSpec `protobuf:"bytes,4,opt,name=contractSpec" json:"contractSpec,omitempty"`
}

func (m *TxData) Reset()                    { *m = TxData{} }
func (m *TxData) String() string            { return proto1.CompactTextString(m) }
func (*TxData) ProtoMessage()               {}
func (*TxData) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *TxData) GetHeader() *TxHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TxData) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *TxData) GetMeta() []byte {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *TxData) GetContractSpec() *ContractSpec {
	if m != nil {
		return m.ContractSpec
	}
	return nil
}

func init() {
	proto1.RegisterType((*ContractSpec)(nil), "proto.ContractSpec")
	proto1.RegisterType((*TxHeader)(nil), "proto.TxHeader")
	proto1.RegisterType((*TxData)(nil), "proto.TxData")
	proto1.RegisterEnum("proto.TransactionType", TransactionType_name, TransactionType_value)
}

func init() { proto1.RegisterFile("transaction.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 483 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x52, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xc5, 0x75, 0xe2, 0xc4, 0x93, 0xa4, 0xd9, 0x6e, 0x51, 0xb5, 0x07, 0x84, 0xac, 0x5c, 0x88,
	0x7a, 0xe8, 0x21, 0x1c, 0x38, 0x97, 0xe6, 0x40, 0x10, 0x20, 0xe1, 0x84, 0x0f, 0xd8, 0xae, 0x27,
	0xc5, 0x2a, 0xde, 0xb5, 0x76, 0xc7, 0xa8, 0xf9, 0x13, 0x3e, 0x86, 0xaf, 0xe0, 0x8b, 0xd0, 0xae,
	0x6d, 0x92, 0x72, 0xf2, 0xbc, 0x37, 0xa3, 0xb7, 0x6f, 0xde, 0x18, 0x2e, 0xc8, 0x4a, 0xed, 0xa4,
	0xa2, 0xd2, 0xe8, 0x9b, 0xda, 0x1a, 0x32, 0x7c, 0x18, 0x3e, 0x8b, 0x2f, 0x30, 0xbd, 0x33, 0x9a,
	0xac, 0x54, 0xb4, 0xad, 0x51, 0x71, 0x0e, 0x03, 0x59, 0x14, 0x56, 0x44, 0x59, 0xb4, 0x9c, 0xe6,
	0xa1, 0xf6, 0x9c, 0x32, 0x05, 0x8a, 0xb3, 0x96, 0xf3, 0x35, 0xbf, 0x82, 0xa4, 0x96, 0x56, 0x56,
	0x4e, 0xc4, 0x59, 0xbc, 0x4c, 0xf3, 0x0e, 0x2d, 0x7e, 0x9f, 0xc1, 0x78, 0xf7, 0xf4, 0x01, 0x65,
	0x81, 0x96, 0xbf, 0x82, 0x74, 0x6f, 0x4d, 0x75, 0xf7, 0x5d, 0x96, 0xba, 0x53, 0x3c, 0x12, 0x5c,
	0xc0, 0x88, 0x4c, 0xdb, 0x6b, 0x95, 0x7b, 0xc8, 0xaf, 0x61, 0x40, 0x87, 0x1a, 0x45, 0x9c, 0x45,
	0xcb, 0xf3, 0xd5, 0x55, 0xeb, 0xf8, 0x66, 0x77, 0xdc, 0x61, 0x77, 0xa8, 0x31, 0x0f, 0x33, 0xfc,
	0x25, 0x0c, 0xb5, 0xd1, 0x0a, 0xc5, 0x20, 0x8b, 0x96, 0xb3, 0xbc, 0x05, 0xde, 0x9e, 0x43, 0x5d,
	0xa0, 0x15, 0xc3, 0x2c, 0xf2, 0xf6, 0x5a, 0xe4, 0x1d, 0x59, 0x54, 0x65, 0x5d, 0xa2, 0x26, 0x91,
	0x84, 0xd6, 0x91, 0xf0, 0x8e, 0xa4, 0x73, 0x48, 0x9b, 0xb5, 0x18, 0x05, 0xb5, 0x1e, 0x7a, 0x3d,
	0x59, 0x99, 0x46, 0x93, 0x18, 0x67, 0xd1, 0x32, 0xce, 0x3b, 0xc4, 0x19, 0xc4, 0x7b, 0x44, 0x91,
	0x06, 0xd2, 0x97, 0xfe, 0x05, 0x57, 0x3e, 0x68, 0x49, 0x8d, 0x45, 0x01, 0xed, 0xce, 0xff, 0x08,
	0xfe, 0x1a, 0x40, 0x59, 0x94, 0x84, 0xbb, 0xb2, 0x42, 0x31, 0x09, 0x8f, 0x9c, 0x30, 0x8b, 0x5f,
	0x11, 0x24, 0xbb, 0xa7, 0xb5, 0x24, 0xc9, 0xdf, 0x40, 0xd2, 0xc6, 0x18, 0x92, 0x9b, 0xac, 0xe6,
	0x7d, 0x0c, 0x5d, 0xba, 0x79, 0xd7, 0xf6, 0xae, 0x6b, 0x79, 0xf8, 0x61, 0x64, 0xd1, 0xe7, 0xd8,
	0x41, 0x7f, 0xb8, 0x0a, 0x49, 0x86, 0x1c, 0xa7, 0x79, 0xa8, 0xf9, 0x3b, 0x98, 0xaa, 0x93, 0x83,
	0x87, 0xd8, 0x26, 0xab, 0xcb, 0x4e, 0xfc, 0xf4, 0x5f, 0xc8, 0x9f, 0x0d, 0x5e, 0xff, 0x89, 0x60,
	0xfe, 0xdf, 0x09, 0x38, 0x40, 0x72, 0x4b, 0xa6, 0x2a, 0x15, 0x7b, 0xc1, 0xe7, 0x30, 0xb9, 0x55,
	0xd6, 0x38, 0x17, 0x6e, 0xc8, 0x22, 0xdf, 0xfc, 0x8c, 0xf6, 0x01, 0x0b, 0x76, 0xc6, 0x67, 0x90,
	0xbe, 0x97, 0xea, 0x71, 0x6f, 0x8d, 0x26, 0x16, 0x7b, 0xb8, 0x2e, 0x1d, 0xd9, 0xf2, 0xbe, 0x21,
	0x36, 0xe0, 0x29, 0x0c, 0x37, 0xce, 0x35, 0xc8, 0x86, 0x5e, 0x25, 0x94, 0xdf, 0xea, 0x42, 0x12,
	0xb2, 0x84, 0x73, 0x38, 0xff, 0xb8, 0xed, 0x6d, 0x6d, 0x74, 0x49, 0x6c, 0xc4, 0x2f, 0x61, 0xfe,
	0xa9, 0x91, 0xcf, 0xc8, 0xb1, 0x1f, 0x3c, 0x32, 0x3f, 0xcd, 0x23, 0xb2, 0x94, 0x5f, 0xc0, 0xac,
	0xe7, 0xbe, 0x36, 0x68, 0x0f, 0x0c, 0xf8, 0x14, 0xc6, 0x5b, 0x54, 0x8d, 0x2d, 0xe9, 0xc0, 0x26,
	0xf7, 0x49, 0x58, 0xfb, 0xed, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x63, 0xb5, 0xaa, 0x11, 0x21,
	0x03, 0x00, 0x00,
}
